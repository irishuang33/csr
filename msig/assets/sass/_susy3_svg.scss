// SVG Settings
// ============


// Susy SVG Defaults
// =================
/// This plugin adds the `svg-grid-colors` property
/// and default value to `$_susy-defaults` â€”
/// you can override that value in `$susy`
/// or any other grid settings map.
/// @group plugin_svg-grid
$_susy-defaults: map-merge((
    'svg-grid-colors': hsla(120, 50%, 50%, 0.5) hsla(120, 50%, 75%, 0.5),
  ), $_susy-defaults);


// SVG Utilities
// =============



// SVG Validate Units
// ------------------
/// Make sure a length is supported in svg
///
/// @access private
///
/// @param {Length} $length -
///   The length to validate
/// @param {String} $name [null] -
///   Optional name of length origin,
///   for error reporting
///
/// @return {Length} -
///   An svg-validated length, or comparable valid length
@function _susy-svg-validate-units(
  $length,
  $name: null
) {
  $_svg-units: ('em', 'ex', 'px', 'pt', 'pc', 'cm', 'mm', 'in', '%');
  $string: type-of($length) == 'string';

  @if ($length == 0) or ($string) or index($_svg-units, unit($length)) {
    @return $length;
  }

  @return _susy-error(
    '`#{unit($length)}` #{$name} units are not supported in SVG',
    '_susy-svg-validate-units');
}



// SVG Rect
// --------
/// Build a single svg rectangle
///
/// @access private
///
/// @param {Length} $x -
///   Horizontal position for the rectangle
/// @param {Length} $width -
///   Width of the rectangle
/// @param {Length} $offset [null] -
///   Offset the rectangle, to account for edge gutters
///
/// @return {String} -
///   Escaped string representing one svg rectangle
@function _susy-svg-rect(
  $x,
  $width,
  $offset: null
) {
  $x: _susy-svg-validate-units($x);
  $width: _susy-svg-validate-units($width);
  $offset: if($offset == 0, null, $offset);

  @if $offset and (type-of($x) == 'number') and comparable($x, $offset) {
    $x: $x + $offset;
    $offset: null;
  } @else if $offset {
    $offset: 'style="transform:translateX(#{$offset})"';
  }

  @return '%3Crect x="#{$x}" width="#{$width}" height="100%" #{$offset}/%3E';
}



// SVG Color
// ---------
/// Stringify colors, and escape hex symbol
///
/// @access private
///
/// @param {Color} $color -
///   Color to stringify and escape
///
/// @return {String} -
///   Escaped string value of color
@function _susy-svg-color(
  $color
) {
  $color: inspect($color); // convert to string

  @if (str-index($color, '#') == 1) {
    $color: '%23' + str-slice($color, 2);
  }

  @return $color;
}



// SVG Gradient
// ------------
/// Create a multi-color svg gradient
///
/// @access private
///
/// @param {List} $colors -
///   List of colors to be equally spaced from `0%` to `100%`
///   in each column rectangle
///
/// @return {String} -
///   Escaped string representing one svg gradient
///   (`id="susy-svg-gradient"`)
@function _susy-svg-gradient(
  $colors
) {
  $gradient: '%3Cdefs%3E%3ClinearGradient spreadMethod="pad"';
  $gradient: '#{$gradient} id="susy-svg-gradient"';
  $gradient: '#{$gradient} x1="0%" y1="0%" x2="100%" y2="0%"%3E';

  @for $i from 1 through length($colors) {
    $color: _susy-svg-color(nth($colors, $i));
    $offset: percentage(($i - 1) / (length($colors) - 1));
    $stop: '%3Cstop offset="#{$offset}" style="stop-color:#{$color};" /%3E';

    $gradient: $gradient + $stop;
  }

  @return $gradient + '%3C/linearGradient%3E%3C/defs%3E';
}


// SVG Grid Math
// =============



// SVG Column Position
// -------------------
/// Determine the proper horizontal position
/// for a column rectangle
///
/// @access private
///
/// @param {Integer} $column -
///   1-indexed column location on the grid
/// @param {Map} $grid -
///   Normalized settings map representing the current grid
///
/// @return {Length} -
///   Horizontal position of svg column rectangle,
///   as distance from the grid edge
@function _susy-svg-column-position(
  $column,
  $grid
) {
  $x: $column - 1;

  @if ($x > 0) {
    $x: susy-span(first $x wide, $grid);
  }
  
  @return $x;
}



// SVG Offset
// ----------
/// Determine if a grid image needs to be offset,
/// to account for edge gutters.
///
/// @access private
///
/// @param {Map} $grid -
///   Normalized settings map representing the current grid
///
/// @return {Length | null} -
///   Expected distance from container edge to first column,
///   based on spread values and gutter-widths
@function _susy-svg-offset(
  $grid
) {
  $columns: su-valid-columns(map-get($grid, 'columns'));
  $gutters: su-valid-gutters(map-get($grid, 'gutters'));
  $container: su-valid-spread(map-get($grid, 'container-spread')) + 1;

  @if ($container == 0) {
    @return null;
  }

  @return $container * susy-gutter($config: $grid) / 2;
}



// SVG API
// =======



// SVG Grid
// --------
/// Return inline svg-data in  to display the grid
/// (import `plugins/svg-grid/prefix` to remove unprefixed alias)
///
/// @group plugin_svg-grid
///
/// @param {Map | List} $grid [$susy] -
///   Map or shorthand defining the current grid
/// @param {Color | List | null} $colors [null] -
///   Column color, or list of colors for column-gradient,
///   used to override the global `svg-grid-colors` setting
/// @param {Length | null} $offset [null] -
///   Manually override the default grid-image offset,
///   to account for grid edges
///
/// @return {String} -
///   CSS inline-data SVG string, in `url(<svg>)` format,
///   for use in image or content properties
@function susy-svg-grid(
  $grid: $susy,
  $colors: null,
  $offset: null
) {
  // Grid parsing & normalizing
  $grid: susy-compile($grid, $context-only: true);

  // Color and gradient handling
  $gradient: '';

  @if (not $colors) {
    $colors: susy-get('svg-grid-colors');
  }

  @if length($colors) > 1 {
    $gradient: _susy-svg-gradient($colors);
    $colors: 'url(%23susy-svg-gradient)';
  } @else {
    $colors: _susy-svg-color($colors);
  }

  // Get a default image-width
  $span: (
    'span': map-get($grid, 'columns'),
    'spread': map-get($grid, 'container-spread'),
  );
  $span: map-merge($grid, $span);
  $image-width: su-call('su-span', $span);
  $image-width: if((type-of($image-width) == 'number'), $image-width, 100%);

  // SVG construction
  $columns: map-get($grid, 'columns');
  $offset: $offset or _susy-svg-offset($grid);

  $attrs: 'fill="#{$colors}" width="#{$image-width}"';
  $svg: 'data:image/svg+xml,';
  $svg: $svg + '%3Csvg xmlns="http://www.w3.org/2000/svg" #{$attrs} %3E';
  $svg: $svg + $gradient;

  @for $column from 1 through length($columns) {
    $width: susy-span(1 narrow at $column, $grid);
    $x: _susy-svg-column-position($column, $grid);
    
    $svg: $svg + _susy-svg-rect($x, $width, $offset);
  }

  @return url('#{$svg}%3C/svg%3E');
}